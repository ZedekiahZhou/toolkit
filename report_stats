#!/bin/bash
dir_mapping_log=../03_Sites/mapping-info/
dir_sites=../03_Sites/
dir_fq=../02_Clean/
sam=$1

# preprocessing stats
# echo $sam
echo -e "Samples:\t${sam}"

raw=`cat log/glo_${sam}.err | grep "Total reads processed" | awk '{print $4}'`
echo -e "Raw reads:\t${raw}"
dup=`cat log/glo_${sam}.err | grep "duplicated records removed" | awk '{print $2}'`
echo -e "Duplicated reads:\t${dup}"
short1=`cat log/glo_${sam}.err | grep "shorter than" | sed -E 's/.+:\t//g' | sed -E 's/\(.+\)//g' | sed -E 's/,//g'`

# echo "\nTagged reads:"
tag=`cat log/glo_${sam}.out | grep "Reads with adapters" | awk '{print $4}'`
echo -e "Reads with tag:\t${tag}"
short2=`cat log/glo_${sam}.out | grep "Reads that were too short" | awk '{print $6}' | sed -E 's/,//g'`
echo -e "Reads shorter than 25 bp:\t$((short1+short2))"
untag=`cat log/glo_${sam}.out | grep "Reads discarded as untrimmed" | awk '{print $5}'`
echo -e "Reads without tag:\t${untag}"
clean=`cat log/glo_${sam}.out | grep "Reads written" | awk '{print $5}'`
echo -e "Clean reads:\t${clean}"
# cat log/glo_${sam}.out | grep "eads" | awk 'NR!=1 && NR!=2' | sed -E 's/ {2,}/\t/' | grep ":"
echo ""

# Mapping stats
input=`cat ${dir_mapping_log}/${sam}.Log.final.out | grep "Number of input reads" | sed 's/^.*\t//g'`
echo -e "Number of input reads for mapping:\t${input}"

m1=`cat ${dir_mapping_log}/${sam}.Log.final.out | grep "Uniquely mapped reads number" | sed 's/^.*\t//g'`
m2=`cat ${dir_mapping_log}/${sam}_rvs.Log.final.out | grep "Uniquely mapped reads number" | sed 's/^.*\t//g'`
m3=`cat ${dir_mapping_log}/${sam}*.sam.output | grep "Reported" | sed 's/Reported //g' | sed 's/ alignments//g'`
echo -e "Uniquely mapped reads number to genome:\t${m1}"
echo -e "Uniquely mapped reads number to rvs:\t${m2}"
echo -e "Uniquely mapped reads number to tf:\t${m3}"
echo -e "Uniquely mapped reads number (Total):\t$[${m1}+${m2}+${m3}]"

# m6A stats
cat ${dir_sites}/${sam}.totalCR.txt | grep Median | sort -k2,2n | \
    awk 'BEGIN {min=1;max=0} {a[NR]=$2} 
    END {if (NR%2) {median=a[(NR+1)/2]} else {median=(a[(NR/2)]+a[(NR/2)+1])/2};
         printf "Min CR:\t%s\n",a[1]; printf "Max CR:\t%s\n",a[NR]; printf "Median CR:\t%s\n",median}'
s1=`cat ${dir_sites}/${sam}.totalm6A.FDR.csv | wc -l`
echo -e "Number of m6A sites:\t$[${s1}-1]"

# Soft clipped stats
echo -e "Mapped reads:\t`samtools view -@ 4 -c ../03_Sites/${sam}_merged.sorted.bam`"
echo -e "Non-softclipped reads:\t`samtools view -@ 4 -c ../04_NoSC/${sam}_NoSC_merged.sorted.bam`"

echo ""
echo ""
